[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "verum-learn"
version = "0.1.0"
description = "Personal Intelligence Learning Engine for Verum Autonomous Driving"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Verum Team", email = "team@verum.ai"}
]
maintainers = [
    {name = "Verum Team", email = "team@verum.ai"}
]
keywords = [
    "machine-learning",
    "autonomous-driving", 
    "cross-domain-learning",
    "biometrics",
    "personal-ai"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    # Core ML/AI frameworks
    "torch>=2.1.0",
    "tensorflow>=2.14.0",
    "scikit-learn>=1.3.0",
    "transformers>=4.35.0",
    "datasets>=2.14.0",
    
    # Numerical computing
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "pandas>=2.1.0",
    "polars>=0.19.0",
    
    # Signal processing and biometrics
    "scipy>=1.11.0",
    "neurokit2>=0.2.0",
    "mne>=1.5.0",
    "pyeeg>=0.4.0",
    "heartpy>=1.2.7",
    
    # Computer vision
    "opencv-python>=4.8.0",
    "pillow>=10.0.0",
    "imageio>=2.31.0",
    
    # Data visualization
    "matplotlib>=3.7.0",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
    "bokeh>=3.3.0",
    
    # Data processing
    "h5py>=3.9.0",
    "zarr>=2.16.0",
    "pyarrow>=13.0.0",
    "fastparquet>=2023.8.0",
    
    # Configuration and utilities
    "pydantic>=2.4.0",
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
    "rich>=13.6.0",
    "typer>=0.9.0",
    
    # Async and concurrency
    "asyncio>=3.4.3",
    "aiofiles>=23.2.0",
    "concurrent-futures>=3.1.1",
    
    # Database and storage
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "redis>=5.0.0",
    "pymongo>=4.5.0",
    
    # Networking
    "httpx>=0.25.0",
    "websockets>=11.0.0",
    "grpcio>=1.59.0",
    "protobuf>=4.24.0",
    
    # Serialization
    "msgpack>=1.0.0",
    "cloudpickle>=3.0.0",
    "joblib>=1.3.0",
    
    # Logging and monitoring
    "loguru>=0.7.0",
    "wandb>=0.15.0",
    "mlflow>=2.7.0",
    "tensorboard>=2.14.0",
    
    # Privacy and security
    "cryptography>=41.0.0",
    "differential-privacy>=1.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.4.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

gpu = [
    "torch[cuda]>=2.1.0",
    "tensorflow[gpu]>=2.14.0",
    "cupy-cuda11x>=12.2.0",
]

notebook = [
    "jupyter>=1.0.0",
    "ipython>=8.16.0",
    "ipywidgets>=8.1.0",
    "jupyter-lab>=4.0.0",
]

research = [
    "optuna>=3.4.0",
    "hyperopt>=0.2.7",
    "ray[tune]>=2.7.0",
    "sacred>=0.8.4",
    "comet-ml>=3.35.0",
]

all = [
    "verum-learn[dev,docs,gpu,notebook,research]"
]

[project.urls]
Homepage = "https://verum.ai"
Documentation = "https://docs.verum.ai"
Repository = "https://github.com/your-org/verum"
"Bug Tracker" = "https://github.com/your-org/verum/issues"
Changelog = "https://github.com/your-org/verum/blob/main/CHANGELOG.md"

[project.scripts]
verum-learn = "verum_learn.cli.main:app"
verum-train = "verum_learn.cli.train:main"
verum-evaluate = "verum_learn.cli.evaluate:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["verum_learn*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
verum_learn = [
    "data/*.json",
    "data/*.yaml", 
    "models/*.onnx",
    "schemas/*.json",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["verum_learn"]
skip = ["__init__.py"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "tensorflow.*", 
    "sklearn.*",
    "cv2.*",
    "neurokit2.*",
    "mne.*",
    "heartpy.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=verum_learn",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "data: marks tests that require data files",
]

# Coverage configuration
[tool.coverage.run]
source = ["verum_learn"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/cli/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration (in setup.cfg format for compatibility)
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
] 